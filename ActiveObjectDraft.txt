#include <iostream>
#include <string>
#include <vector>

typedef std::string Message;


// [1]
class MQ_Servant
{
public:
    // Constructor
    MQ_Servant(int mq_size) : m_size(mq_size) 
    { 
        std::cout << "Creating MQ_Servant object." << std::endl; 
    }

// --------------------------------------------
    // Message queue implementation operations.
    void put_i(const Message& msg) 
    { 
        std::cout << "Calling put_i(). Putting Message in queue (vector): " << msg << std::endl; 
        msgs.push_back(msg);
    }
// --------------------------------------------    
    Message get_i(void) 
    { 
        std::cout << "Calling get_i(). Getting Message: - " << std::endl; 
    }
    
    // Predicates.
    bool empty_i(void) const 
    { 
        std::cout << "Calling empty_i(). Getting Message: - " << std::endl; 
    }
    
    bool full_i(void) const 
    { 
        std::cout << "Calling full_i() in MQ_Servant. Getting Message: 0 [ Not Full ] " << std::endl; 
        return 0;
    }
    
private:
int m_size;
std::vector<Message> msgs;
};


// [2]
class Method_Request
{
public:
    virtual bool guard (void) const = 0;
    virtual void call (void) = 0;
};

class Put : public Method_Request
{
public:
    Put (MQ_Servant *rep, Message arg) : servant_ (rep), arg_ (arg) 
    {
        std::cout << "Creating Put (Method_Request) object." << std::endl;
    }

// 1] -----------------------------    
    virtual bool guard(void) const 
    {
        return !servant_->full_i ();
    }
// 2] -----------------------------
    virtual void call (void) 
    {
        // **** CALL CLINT FUNCTION ****
        servant_->put_i (arg_);
    }
// -----------------------------    
private:
MQ_Servant* servant_;
Message arg_;
};


// [3]
class Activation_Queue
{
public:
    Activation_Queue(size_t high_water_mark)
    { 
        std::cout << "Creating Activation_Queue object." << std::endl; 
    }

    void enqueue(Method_Request* method_request) 
    {
        std::cout << "Calling Activation_Queue enqueue. Push Method_Request object in enqueue vector." << std::endl;
        mrVec.push_back(method_request);
    };
    
    std::vector<Method_Request*>& getmrVec()
    {
        return mrVec;
    }

    void dequeue (Method_Request* method_request)
    {
        std::cout << " Activation_Queue dequeue. " << std::endl;
    }
private:
std::vector<Method_Request*> mrVec;
};


// [4]
class MQ_Scheduler
{
public:
    // Constructor
    MQ_Scheduler (size_t high_water_mark) : act_queue_(new Activation_Queue(high_water_mark))
    {
        std::cout << "Creating MQ_Scheduler object." << std::endl;
        // Spawn a separate thread to dispatch method requests.
        // Thread_Manager::instance ()->spawn(svc_run, this);
    }
    
    void enqueue(Method_Request* method_request) 
    {
        act_queue_->enqueue (method_request);
        // This should be in separate thread
        this->dispatch();
    }
    
    virtual void dispatch(void)
    {
        auto mrVec = act_queue_->getmrVec();
        std::vector<Method_Request*>::iterator i;
        
        // Iterate continuously in a separate thread.
        // for (;;) {

        for (i = mrVec.begin(); i != mrVec.end(); i++) 
        {
            Method_Request* mr = *i;

            if (mr->guard()) // Is vector of Messages full? Check indirectly via Method_Request object.
            {
                act_queue_->dequeue(mr);
                mr->call();
                delete mr;
            } // else queue (Servant) is full, wait until client empty vector of msgs
        }        
    };
    
    // Run this infinity method in separate thread
    /*
    void* MQ_Scheduler::svc_run (void *args)
    {
        MQ_Scheduler* this_obj = reinterpret_cast<MQ_Scheduler *> (args);
        this_obj->dispatch ();
    }
    */
    
protected:
Activation_Queue *act_queue_;
};


// [2]
class MQ_Proxy
{
public:
    enum { MAX_SIZE = 100 };
    
    MQ_Proxy (int size) : servant_(new MQ_Servant (size)), scheduler_(new MQ_Scheduler (size)) 
    {
        std::cout << "Creating MQ_Proxy object." << std::endl;
    }

    void put(const Message &m) 
    {
        Method_Request* method_request = new Put(servant_, m);
        scheduler_->enqueue(method_request);
    }

    /*Message_Future get(void) 
    {
        Message_Future result;
        Method_Request *method_request = new Get (servant_, result);
        scheduler_->enqueue (method_request);
        return result;
    }*/

protected:
MQ_Servant* servant_;
MQ_Scheduler* scheduler_;
};


int main()
{
    // MQ_Servant mq_ser(10);
    MQ_Proxy mqProxy(10);
    mqProxy.put("Message 0");

    return 0;
}